/** Import the class java_cup.runtime.*  */
import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Stack;

action code {:
    Database db = Main.getDB();
	//For fixing prefixes
	HashMap<Column, String> newPrefixes = new HashMap<Column, String>();
    //For type checking at top SQLNode
    HashMap<Column, String> ColTypeAssertions = new HashMap<Column, String>();
    HashMap<Column, Column> ColColAssertions = new HashMap<Column, Column>();
    //For resolving table names. <alias, tableName>
    HashMap<String, String> aliasTables = new HashMap<String, String>();
    ArrayList<String> semantics = new ArrayList<String>();
    //I know this is kinda a lame way to do it
    boolean nested = false;
    boolean coRelated = false;
    //Unmatched columns
    HashMap<Column, ArrayList<String[]>> unmatchedCols = new HashMap<Column, ArrayList<String[]>>();
    //For checking for superfluous relations
    ArrayList<String[]> relations = new ArrayList<String[]>();
    :};
    

/* Parser code to change the way the parser reports errors (include
   line and column number of the error). */
parser code {:
    
    /* Change the method report_error so it will display the line and
       column of where the error occurred in the input as well as the
       reason for the error which is passed into the method in the
       String 'message'. */
    public void report_error(String message, Object info) {
    	/* Create a StringBuffer called 'm' with the string 'Error' in it. */
        StringBuffer m = new StringBuffer("Error");
   
        /* Check if the information passed to the method is the same
           type as the type java_cup.runtime.Symbol. */
        if (info instanceof java_cup.runtime.Symbol) {
            /* Declare a java_cup.runtime.Symbol object 's' with the
               information in the object info that is being typecasted
               as a java_cup.runtime.Symbol object. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            /* Check if the line number in the input is greater or
               equal to zero. */
            if (s.left >= 0) {                
                /* Add to the end of the StringBuffer error message
                   the line number of the error in the input. */
                m.append(" in line "+(s.left+1));   
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)                    
                    /* Add to the end of the StringBuffer error message
                       the column number of the error in the input. */
                    m.append(", column "+(s.right+1));
            }
        }
   
        /* Add to the end of the StringBuffer error message created in
           this method the message that was passed into this method. */
        m.append(" : "+message);
   
        /* Print the contents of the StringBuffer 'm', which contains
           an error message, out on a line. */
        throw new Error("Syntax Error - " + m.toString());
    }
   
    /* Change the method report_fatal_error so when it reports a fatal
       error it will display the line and column number of where the
       fatal error occurred in the input as well as the reason for the
       fatal error which is passed into the method in the object
       'message' and then exit.*/
    public void report_fatal_error(String message, Object info) {
    	try {
    		report_error(message, info);
    	} catch (Error e) {
        	throw new Error(e.getMessage());
        }
    }
:};


/* ------------Declaration of Terminals and Non Terminals Section----------- */
   
/* Terminals (tokens returned by the scanner).  

   Terminals that have no value are listed first and then terminals
   that do have an value, in this case an integer value, are listed on
   the next line down. */
terminal            SEMI, 
                    SELECT,
                    DISTINCT, 
                    FROM, 
                    WHERE, 
                    AND, 
                    NOT,
                    IN, 
                    EXISTS, 
                    COMMA, 
                    DOT, 
                    LPAREN, 
                    RPAREN;

terminal String     STRING, NAME, INTNUM, COMPARISON;

/* Non terminals used in the grammar section.  

   Non terminals that have an object value are listed first and then
   non terminals that have an integer value are listed.  An object
   value means that it can be any type, it isn't set to a specific
   type.  So it could be an Integer or a String or whatever. */
                   
non terminal SQLNode                sql_start,
                                    select_stmt;
                                    
non terminal ArrayList<Column>      select_list;

non terminal Boolean                opt_distinct;

non terminal Column                 column_ref;
                                    
non terminal ArrayList<String[]>    from_clause,
                                    table_ref_commalist;
                                    
non terminal String[]               table_ref;

non terminal String                 table, tableAlias;

non terminal ArrayList<WhereNode>   opt_where_clause,
                                    where_clause,
                                    search_condition;
                                    
non terminal WhereNode              predicate,
                                    pred,
                                    comparison_pred,
                                    in_pred,
                                    exists_pred;
                                    
non terminal Scalar                 literal,
                                    scalar_exp;

/*------------------------------ Grammar ------------------------------*/
/*
    <sql_start> ::=<select_stmt> SEMI
    <select_stmt> ::= SELECT <opt_distinct> <select_list> <from_clause> <opt_where_clause>
    <opt_distinct> ::= / empty / | DISTINCT
    <select_list> ::= <column_ref> | <select_list> ',' <column_ref>
    <column_ref> ::= NAME | NAME '.' NAME
    <from_clause> ::= FROM <table_ref_commalist>
    <table_ref_commalist> ::= <table_ref> | <table_ref_commalist> ',' <table_ref>
    <table_ref> ::= <table> | <table> <range_variable>
    <table> ::= NAME
    <range_variable> ::= NAME
    <opt_where_clause> ::= / empty / | <where_clause>
    <where_clause> ::= WHERE <search_condition>
    <search_condition> ::= <predicate> | <search_condition> AND <predicate>
    <predicate> ::= <pred> | NOT <pred>
    <pred> ::= <comparison_pred> | <in_pred> | <exists_pred>
    <comparison_pred> ::= <scalar_exp> COMPARISON <scalar_exp>
    <scalar_exp> ::= <literal> | <column_ref>
    <literal> ::= STRING | INTNUM
    <in_pred> ::= <scalar_exp> IN '(' <select_stmt> ')'
    <exists_pred> ::= EXISTS '(' <select_stmt> ')'
------------------------------------------------------------------------*/

/* Returns SQLNode */
sql_start             ::= select_stmt:s SEMI
            {: System.out.println("No Syntax Error");

        	SQLNode child = s;
            SQLNode sqlNode = new SQLNode();
            child.setParent(sqlNode);
        	
			//Handle unmatched columns
			if (unmatchedCols.size() > 0) {
				for (Column unmatchedCol : unmatchedCols.keySet()) {
					String unmatchedName = unmatchedCol.getName();
					String unmatchedPrefix = unmatchedCol.getPrefix();
					if (unmatchedPrefix == null) unmatchedPrefix = "[Prefix not found]";
					ArrayList<String> fromStrings = new ArrayList<String>();
					for (String[] relation : unmatchedCol.getSN().getRelations()) {
						if(relation[1] == null) {
							fromStrings.add(relation[0]);
						} else {
							fromStrings.add(String.format("%s %s", relation[0], relation[1]));
						}
					}
					semantics.add(String.format("Unmatched Columns: %s.%s from %s", unmatchedPrefix, unmatchedName, String.join(", ", fromStrings)));
				}
			}
			
			/* For now this isn't working well
			//Handle unmatched tables
            if (relations.size() > 0) {
            	ArrayList<String> relStrings = new ArrayList<String>();
            	for (String[] rel : relations) {
            		relStrings.add(rel[0]);
            	}
            	semantics.add(String.format("Unmatched relations: %s", String.join(", ", relStrings)));
            }
            */
            
			//Handle Semantics errors
            if(semantics.size() > 0) {
                String errorMsg = String.join("\n", semantics);
                throw new SemanticException(errorMsg);
            }
            
            
            //Fix prefixes
            for (Column col : newPrefixes.keySet()) {
            	col.setPrefix(newPrefixes.get(col));
            }
            
            //Type checking
            //Column to predefined type
            for(Column checkColumn : ColTypeAssertions.keySet()) {
                String checkName = checkColumn.getName();
                String checkType;
                try {
                	checkType = db.getRelation(checkColumn.getPrefix()).attributeType(checkName); // throws null pointer
                } catch (NullPointerException e) {
                	throw new SemanticException(String.format("Relation does not exist in database: %s.%s", checkColumn.getPrefix(), checkName));
                }
                switch (checkType) {
                    case "VARCHAR":
                        checkType = "str";
                        break;
                    case "INTEGER":
                    case "DECIMAL":
                        checkType = "num";
                        break;
                }
                if(!checkType.equals(ColTypeAssertions.get(checkColumn))) {
                    throw new SemanticException("Type mismatch. " + checkColumn.getName() + " is not type " + ColTypeAssertions.get(checkColumn) + ".");
                }
            }
            
            //Type checking
            //Column to Column
            for(Column checkColumn : ColColAssertions.keySet()) {
                Column checkColumn2 = ColColAssertions.get(checkColumn);
                if (checkColumn.getPrefix() == null) {
                    throw new SemanticException("Column " + checkColumn.getName() + "does not resolve to a table.");
                }
                if (checkColumn2.getPrefix() == null) {
                    throw new SemanticException("Column " + checkColumn2.getName() + "does not resolve to a table.");
                }
                String checkName1 = checkColumn.getName();
                String checkType1 = null;
                if(db.relationExists(checkColumn.getPrefix()) && db.getRelation(checkColumn.getPrefix()).attributeExists(checkColumn.getName())) {
                checkType1 = db.getRelation(checkColumn.getPrefix()).attributeType(checkColumn.getName());
                } else throw new SemanticException(checkColumn.getPrefix() + "." + checkColumn.getName() + " does not resolve to a table.1");
                String checkName2 = checkColumn2.getName();
                String checkType2 = null;
                if(db.relationExists(checkColumn2.getPrefix()) && db.getRelation(checkColumn2.getPrefix()).attributeExists(checkColumn2.getName())) {
                checkType2 = db.getRelation(checkColumn2.getPrefix()).attributeType(checkColumn2.getName());
                } else throw new SemanticException(checkColumn2.getPrefix() + "." + checkColumn2.getName() + " does not resolve to a table.2");
                switch (checkType1) {
                    case "VARCHAR":
                        checkType1 = "str";
                        break;
                    case "INTEGER":
                    case "DECIMAL":
                        checkType1 = "num";
                        break;
                }
                switch (checkType2) {
                    case "VARCHAR":
                        checkType2 = "str";
                        break;
                    case "INTEGER":
                    case "DECIMAL":
                        checkType2 = "num";
                        break;
                }
                if(!checkType1.equals(checkType2)) {
                    throw new SemanticException("Type mismatch. " + checkColumn.getName() + " type does not match " + checkColumn2.getName() + ".");
                }
            }

            System.out.println("No Semantic Error");
            if(nested) {
                if(coRelated) {
                    System.out.println("Nested - Co-related");
                } else {
                    System.out.println("Nested - Not Co-related");
                }
            }
            else System.out.println("Not Nested");
            
            /*--------EXECUTING QUERY---------*/
            Relation result = child.evaluate(Main.getDBName()); //Not sure why I need to pass in a separate database, but if I don't it breaks the current one.
            System.out.println("\nPrinting relation\n");
            result.setName("ANSWER");
            result.displayRelation();
            System.out.println("\n");
            
            RESULT = sqlNode; :};

/* Returns SQLNode */
select_stmt 	        ::= SELECT opt_distinct:o select_list:s from_clause:r opt_where_clause:owc
            {: SQLNode sqlNode = new SQLNode(o, s, r);
            //Setting Column SQLNodes
            for(Column col : s) {
                col.setSN(sqlNode);
            }
            //Setting WhereNode Column SQLNodes
            if(owc != null) {
                sqlNode.setWhereNodes(owc);
                for(WhereNode wn : owc) {
                    if(wn.getNested()) nested = true;
                    if(wn.getLeftOperandType() != null && wn.getLeftOperandType().equals("col")) {
                        wn.getLeftOperandCol().setSN(sqlNode);
                    }
                    if(wn.getRightOperandType() != null && wn.getRightOperandType().equals("col") && (wn.getNested() && (!wn.getNestingType().equals("in") || !wn.getNestingType().equals("exists")))) {
                        wn.getRightOperandCol().setSN(sqlNode);
                    }
                }
            }
            
            //Store from clause
            for (String[] rel : r) {
            	relations.add(rel);
            }
            
            //Check to see if select_list resolves to from_clause
            //1. Get each column from select_list
            //2. Check to see if it matches each table from from_clause
            //3. Set column index
            ArrayList<Column> cols = new ArrayList<Column>();
            cols.addAll(s);
            cols.addAll(unmatchedCols.keySet());
            for (Column col : cols) {
            	boolean match = false;
            	int matchIndex = 0;
            	String prefix = col.getPrefix();
            	String name = col.getName();
            	ArrayList<String[]> tables;
            	if (unmatchedCols.containsKey(col)) tables = unmatchedCols.get(col);
            	else tables = r;
            	//Resolving aliases for col
            	if (prefix != null && aliasTables.containsKey(prefix)) {
            		prefix = aliasTables.get(prefix);
            		col.setPrefix(prefix);
            	}
            	for (int i = 0; i < tables.size(); i++) {
            		String tableName = tables.get(i)[0];
            		if (prefix != null && prefix.equals(tableName)) {
            			if (!match) {
            				match = true;
            				matchIndex = i;
            			}
            			else {
            				String[] originTable = sqlNode.getTable(col.getIndex());
            				if (!originTable[0].equals(tableName)) throw new SemanticException(String.format("1 Ambiguous column: %s.%s and tableName is %s", prefix, name, tableName));
            			}
            		} else if (prefix == null) {
            			//Go through each and stop with match if the table contains a column with the same name
            			if (db.relationExists(tableName) && db.getRelation(tableName).attributeExists(name)) {
            				if (!match) {
            					newPrefixes.put(col, tableName);
            					match = true;
            					matchIndex = i;
            				}
            				else throw new SemanticException("2 Ambiguous column: " + name);
            			}
            		}
            	}
            	//Now check to see if everything actually exists if we matched
        		//Set col index if so
            	
        		if (match) {
        			if (prefix == null && newPrefixes.containsKey(col)) prefix = newPrefixes.get(col);
        			if (db.relationExists(prefix) && db.getRelation(prefix).attributeExists(name)) {
        				//We matched
        				col.setIndex(matchIndex);
        				if (unmatchedCols.containsKey(col)) unmatchedCols.remove(col);
        				relations.remove(tables);
        			} else {
        				semantics.add(String.format("Relation does not exist in database: %s.%s", prefix, name));
        			}
        		} else {
        			if (!unmatchedCols.containsKey(col)) unmatchedCols.put(col, r);
        		}
            }
            
            //Check to see if cols from WhereNodes resolve here
            SQLNode curSN;
            Stack<SQLNode> bucket = new Stack<SQLNode>();
            bucket.push(sqlNode);
            while (true) {
            	if(bucket.empty()) break;
            	curSN = bucket.pop();
            	if(curSN.getWhereNodes() == null) break;
            	
            	
            	for(WhereNode wn : curSN.getWhereNodes()) {
            		//Get operands from this WhereNode and send them to checkCols
            		ArrayList<Column> checkCols = new ArrayList<Column>();
            		if(wn.getLeftOperandType() != null && wn.getLeftOperandType().equals("col")) {
            			checkCols.add(wn.getLeftOperandCol());
            		}
            		if(wn.getRightOperandType() != null && wn.getRightOperandType().equals("col") && !wn.getNested()) {
            			checkCols.add(wn.getRightOperandCol());
            		}
            		
            		//Check to see if each operand resolves in this local SQLNode
            		for (Column col : checkCols) {
            			boolean match = false;
            			int matchIndex = 0;
            			String prefix = col.getPrefix();
            			String name = col.getName();
            			if (prefix != null && aliasTables.containsKey(prefix)) {
            				prefix = aliasTables.get(prefix);
            				col.setPrefix(prefix);
            			}
            			for (int i = 0; i < r.size(); i++) {
            				String tableName = r.get(i)[0];
            				if (prefix != null && prefix.equals(tableName)) {
            					if (db.relationExists(tableName) && db.getRelation(tableName).attributeExists(name)) {
	                    			if (!match) {
	                    				match = true;
	                    				matchIndex = i;
	                    			}
	                    			else {
	                    				String[] originTable = sqlNode.getTable(col.getIndex());
	                    				if (!originTable[0].equals(tableName)) throw new SemanticException(String.format("4 Ambiguous column: %s.%s", prefix, name));
	                    			}
            					}
                    		} else if (prefix == null) {
                    			if (db.relationExists(tableName) && db.getRelation(tableName).attributeExists(name)) {
                    				if (!match) {
                    					newPrefixes.put(col, tableName);
                    					match = true;
                    					matchIndex = i;
                    				}
                    				else throw new SemanticException("5 Ambiguous column: " + name);
                    			}
                    		}
            				
            				//If it matched, check for existence and co-relation
            				if (match) {
            					if (prefix == null && newPrefixes.containsKey(col)) prefix = newPrefixes.get(col);
            					
            					//existence
            					//repetitive but this catches anything i might've missed
            					if (!db.relationExists(prefix) || !db.getRelation(prefix).attributeExists(name)) {
            						semantics.add(String.format("Relation does not exist in database: %s.%s", prefix, name));
            					}
            					
            					//co-related left
            					if(col == wn.getLeftOperandCol() && wn.getLeftResolveNode() == null) {
            						wn.setLeftResolveNode(sqlNode);
            						wn.setLeftResolveIndex(matchIndex);
            						if (wn.getLeftOperandCol().getSN() != wn.getLeftResolveNode()) coRelated = true;
            					} /*else if (col == wn.getLeftOperandCol()) {
            						String origTable = wn.getLeftResolveNode().getTable(wn.getLeftResolveIndex())[0];
            						String newTable = curSN.getTable(matchIndex)[0];
            						if (!origTable.equals(newTable) && curSN == wn.getLeftResolveNode()) semantics.add(String.format("6 Ambiguous Column: resolve tables %s.%s and %s.%s do not agree", origTable, name, newTable, name));
            					}*/
            					
            					//co-related right
            					if(col == wn.getRightOperandCol() && wn.getRightResolveNode() == null) {
            						wn.setRightResolveNode(sqlNode);
            						wn.setRightResolveIndex(matchIndex);
            						if (wn.getRightOperandCol().getSN() != wn.getRightResolveNode()) coRelated = true;
            					} /*else if (col == wn.getRightOperandCol()) {
            						String origTable = wn.getRightResolveNode().getTable(wn.getRightResolveIndex())[0];
            						String newTable = curSN.getTable(matchIndex)[0];
            						if (!origTable.equals(newTable) && curSN == wn.getRightResolveNode()) semantics.add(String.format("7 Ambiguous Column: resolve tables %s.%s and %s.%s do not agree", origTable, name, newTable, name));
            					}*/
            					
            				}
            			}
            		}
            		if(wn.getSubQuery() != null) {
            			bucket.push(wn.getSubQuery());
            		}
            	}
            }
            
            
            //Checking for co-relatedness. There are 2 criteria:
            //1: the column did not resolve in its parent SQLNode -- check for this here
            //2: the column resolves in some other SQLNode -- this is already checked above
            
            if(owc != null) {
                for (WhereNode wn : owc) {
                    if(wn.getNested()) {
                        SQLNode subQuery = wn.getSubQuery();
                        ArrayList<Column> subCols = subQuery.getColumns();
                        if (subQuery.getWhereNodes() != null) {
	                        for(WhereNode swn : subQuery.getWhereNodes()) {
	                            //Add to subCols any cols from where queries
	                            //No need to dive into subqueries, that'll be recursion
	                            if(swn.getLeftOperandType() != null && swn.getLeftOperandType().equals("col")) {
	                                subCols.add(swn.getLeftOperandCol());
	                            }
	                            if(swn.getRightOperandType() != null && swn.getRightOperandType().equals("col") && !swn.getNested()) {
	                                subCols.add(swn.getRightOperandCol());
	                            }
	                        }
                        }
                        for(Column subCol : subCols) {
                            if(subCol.getSN() != subQuery) {
                                coRelated = true;
                            }
                        }
                    }
                }
            }
            RESULT = sqlNode; :};
            
/* Return boolean true or false */
opt_distinct 	        ::= /*empty*/
            {: RESULT = false; :}
                            |
                            DISTINCT
            {: RESULT = true; :};

/* Return ArrayList<Column>*/ 
select_list 	        ::= column_ref:c
            {: ArrayList<Column> cols = new ArrayList<Column>();
            cols.add(c);
            RESULT = cols; :}
                            | select_list:s COMMA column_ref:c
            {: ArrayList<Column> cols = s;
            cols.add(c);
            RESULT = cols; :};

/* Return Column */
column_ref 	        ::= NAME:n
            {: RESULT = new Column(n); :}
                        | NAME:p DOT NAME:n
            {:  RESULT = new Column(p, n); :};
            
/* Return ArrayList<String[]> */
from_clause 	        ::= FROM table_ref_commalist:ts
            {:  RESULT = ts; :};
            
/* Return ArrayList<String[]> */
table_ref_commalist 	::= table_ref:t
            {: ArrayList<String[]> tables = new ArrayList<String[]>();
            tables.add(t);
            RESULT = tables; :}
                            | table_ref_commalist:ts COMMA table_ref:t
            {: ArrayList<String[]> tables = ts;
            tables.add(t);
            RESULT = tables; :};
            
/* Return String[]. [0]: table name, [1]: table alias */
table_ref 	        ::= table:t
            {: String[] tref = new String[2];
            tref[0] = new String(t);
            tref[1] = null;
            if (!db.relationExists(tref[0])) semantics.add("Table does not exist: " + tref[0]);
            RESULT = tref; :}
                        | table:t tableAlias:a
            {:  String[] tref = new String[2];
            tref[0] = new String(t);
            tref[1] = new String(a);
            if (aliasTables.containsKey(tref[1])) semantics.add("Alias " + tref[1] + " name collision."); //If an alias already exists, prepare an error.
            aliasTables.put(tref[1], tref[0]); //Otherwise, set it in aliasTables
            //Check to make sure the table exists here
            if (!db.relationExists(tref[0])) semantics.add("Table does not exist: " + tref[0]);
            RESULT = tref; :};
            
/* Return String */
table 	            ::= NAME:n
            {:  RESULT = n; :};
            
/* Return String */
tableAlias 	    ::= NAME:n
            {:  RESULT = n; :};

/* Return null or ArrayList<WhereNode> */
opt_where_clause 	    ::= /*empty*/
            {: RESULT = null; :}
                            | where_clause:wns
            {:  RESULT = wns; :};
            
/* Return ArrayList<WhereNode> */
where_clause 	        ::= WHERE search_condition:wns
            {:  RESULT = wns; :};
            
/* Return ArrayList<WhereNode> */
search_condition 	    ::= predicate:p
            {: ArrayList<WhereNode> whereNodes = new ArrayList<WhereNode>();
            whereNodes.add(p); 
            RESULT = whereNodes; :}
                            | search_condition:wns AND predicate:p
            {: ArrayList<WhereNode> whereNodes = wns;
            wns.add(p); 
            RESULT = whereNodes; :};
            
/* Return WhereNode */
predicate 	        ::= pred:p
            {: WhereNode whereNode = p;
            RESULT = p; :}
                        | NOT pred:p
            {: WhereNode whereNode = p;
            p.setNegated();
            RESULT = p; :};
            
/* Return WhereNode */
pred 	                ::= comparison_pred:p
            {: WhereNode whereNode = p;
            RESULT = whereNode; :}
                            | in_pred:p
            {: WhereNode whereNode = p; 
            whereNode.setNestingType("in"); 
            RESULT = whereNode; :}
                            | exists_pred:p
            {: WhereNode whereNode = p;
            whereNode.setNestingType("exists");
            RESULT = whereNode; :};
            
/* Returns WhereNode */   
comparison_pred 	    ::= scalar_exp:sl COMPARISON:c scalar_exp:sr
            {: WhereNode whereNode = new WhereNode();
			whereNode.setComparison(c);
            whereNode.setLeftOperandType(sl.getType());
            switch (sl.getType()) {
                case "str":
                    whereNode.setLeftOperandValue(sl.getStrValue());
                    break;
                case "num":
                    whereNode.setLeftOperandValue(sl.getStrValue());
                    break;
                case "col":
                    whereNode.setLeftOperandCol(sl.getColValue());
                    break;
            }
            whereNode.setRightOperandType(sr.getType());
            switch (sr.getType()) {
                case "str":
                    whereNode.setRightOperandValue(sr.getStrValue());
                    break;
                case "num":
                    whereNode.setRightOperandValue(sr.getStrValue());
                    break;
                case "col":
                    whereNode.setRightOperandCol(sr.getColValue());
                    break;
            }
            //TODO
            //make sure prefix gets set
            //Type checking
            if ((sl.getType().equals("num") || sl.getType().equals("str")) && sr.getType().equals("col")) {
                ColTypeAssertions.put(sr.getColValue(), sl.getType());
            } else if (sl.getType().equals("col") && (sr.getType().equals("num") || sr.getType().equals("str"))) {
                ColTypeAssertions.put(sl.getColValue(), sr.getType());
            } else if (sl.getType().equals("col") && sr.getType().equals("col")) {
                ColColAssertions.put(sl.getColValue(), sr.getColValue());
            } else if (!sl.getType().equals(sr.getType())) {
                semantics.add("Type mismatch: " + sl.toString() + " " + sr.toString() + ".");
            }
            RESULT = whereNode; :};
            
/* Returns Scalar */
scalar_exp 	        ::=     literal:l
            {: Scalar scalar = l;
            RESULT = scalar; :}
                            | column_ref:cr
            {: Scalar scalar = new Scalar("col", cr);
            RESULT = scalar; :};

/* Returns Scalar */
literal 	            ::= STRING:s
            {: RESULT = new Scalar("str", s); :}
                            | INTNUM:i
            {:  RESULT = new Scalar("num", i); :};

/* Returns WhereNode */   
in_pred 	            ::= scalar_exp:se IN LPAREN select_stmt:s RPAREN
            {: WhereNode whereNode = new WhereNode();
            whereNode.setNestingType("in"); 
            whereNode.setNested();
            whereNode.setSubQuery(s);
            //Type checking
            if(s.getColumns().size() == 1) {
                //Since the resolve tree won't be ready this far down the grammar
                //this will save column type assertions in some HashMaps for checking at the root node
                if(se.getType().equals("col")) {
                    ColColAssertions.put(se.getColValue(), s.getColumns().get(0));
                    whereNode.setLeftOperandType(se.getType());
                    whereNode.setLeftOperandCol(se.getColValue());
                } else if(se.getType().equals("str") || se.getType().equals("num")) {
                    ColTypeAssertions.put(s.getColumns().get(0), se.getType());
                    whereNode.setLeftOperandType(se.getType());
                    whereNode.setLeftOperandValue(se.getValue());
                }
            } else {
                semantics.add("Type mismatch: Can not compare expression to more than a single column.");
            }

            RESULT = whereNode; :};
            
/* Returns WhereNode */   
exists_pred 	        ::= EXISTS LPAREN select_stmt:s RPAREN
            {: WhereNode whereNode = new WhereNode();
            whereNode.setNestingType("exists");
            whereNode.setNested();
            whereNode.setSubQuery(s);
            RESULT = whereNode; :};