/** Import the class java_cup.runtime.*  */
import java_cup.runtime.*;
import java.util.Hashtable;

action code {:
    Hashtable<String, Integer> ids = new Hashtable<String, Integer>();
:};


/* Parser code to change the way the parser reports errors (include
   line and column number of the error). */
parser code {:
    
    /* Change the method report_error so it will display the line and
       column of where the error occurred in the input as well as the
       reason for the error which is passed into the method in the
       String 'message'. */
    public void report_error(String message, Object info) {
        throw new Error("Syntax Error");
    }
   
    /* Change the method report_fatal_error so when it reports a fatal
       error it will display the line and column number of where the
       fatal error occurred in the input as well as the reason for the
       fatal error which is passed into the method in the object
       'message' and then exit.*/
    public void report_fatal_error(String message, Object info) {
        throw new Error("Syntax Error");
    }
:};


/* ------------Declaration of Terminals and Non Terminals Section----------- */
   
/* Terminals (tokens returned by the scanner).  

   Terminals that have no value are listed first and then terminals
   that do have an value, in this case an integer value, are listed on
   the next line down. */
terminal            SEMI, 
                    SELECT,
                    DISTINCT, 
                    FROM, 
                    WHERE, 
                    AND, 
                    NOT, 
                    COMPARISON, 
                    IN, 
                    EXISTS, 
                    COMMA, 
                    DOT, 
                    LPAREN, 
                    RPAREN;

terminal String    STRING, NAME;

terminal Integer   INTNUM;

/* Non terminals used in the grammar section.  

   Non terminals that have an object value are listed first and then
   non terminals that have an integer value are listed.  An object
   value means that it can be any type, it isn't set to a specific
   type.  So it could be an Integer or a String or whatever. */
non terminal Object         sql_start, 
                            select_stmt, 
                            opt_distinct, 
                            select_list,
                            column_ref,
                            from_clause,
                            table_ref_commalist,
                            table_ref,
                            table,
                            range_variable,
                            opt_where_clause,
                            where_clause,
                            search_condition,
                            predicate,
                            pred,
                            comparison_pred,
                            scalar_exp,
                            literal,
                            in_pred,
                            exists_pred;

/*------------------------------ Grammar ------------------------------*/
/*
    <sql_start> ::=<select_stmt> SEMI
    <select_stmt> ::= SELECT <opt_distinct> <select_list> <from_clause> <opt_where_clause>
    <opt_distinct> ::= / empty / | DISTINCT
    <select_list> ::= <column_ref> | <select_list> ',' <column_ref>
    <column_ref> ::= NAME | NAME '.' NAME
    <from_clause> ::= FROM <table_ref_commalist>
    <table_ref_commalist> ::= <table_ref> | <table_ref_commalist> ',' <table_ref>
    <table_ref> ::= <table> | <table> <range_variable>
    <table> ::= NAME
    <range_variable> ::= NAME
    <opt_where_clause> ::= / empty / | <where_clause>
    <where_clause> ::= WHERE <search_condition>
    <search_condition> ::= <predicate> | <search_condition> AND <predicate>
    <predicate> ::= <pred> | NOT <pred>
    <pred> ::= <comparison_pred> | <in_pred> | <exists_pred>
    <comparison_pred> ::= <scalar_exp> COMPARISON <scalar_exp>
    <scalar_exp> ::= <literal> | <column_ref>
    <literal> ::= STRING | INTNUM
    <in_pred> ::= <scalar_exp> IN '(' <select_stmt> ')'
    <exists_pred> ::= EXISTS '(' <select_stmt> ')'
------------------------------------------------------------------------*/

sql_start             ::= select_stmt SEMI
            {:  System.out.println("\nNo Syntax Error\n"); RESULT = true; :};

select_stmt 	        ::= SELECT opt_distinct select_list from_clause opt_where_clause
            {:  RESULT = true; :};
opt_distinct 	        ::= /*empty*/ | DISTINCT
            {:  RESULT = true; :};
select_list 	        ::= column_ref | select_list COMMA column_ref
            {:  RESULT = true; :};
column_ref 	        ::= NAME | NAME DOT NAME
            {:  RESULT = true; :};
from_clause 	        ::= FROM table_ref_commalist
            {:  RESULT = true; :};
table_ref_commalist 	::= table_ref | table_ref_commalist COMMA table_ref
            {:  RESULT = true; :};
table_ref 	        ::= table | table range_variable
            {:  RESULT = true; :};
table 	            ::= NAME
            {:  RESULT = true; :};
range_variable 	    ::= NAME
            {:  RESULT = true; :};
opt_where_clause 	    ::= /*empty*/ | where_clause
            {:  RESULT = true; :};
where_clause 	        ::= WHERE search_condition
            {:  RESULT = true; :};
search_condition 	    ::= predicate | search_condition AND predicate
            {:  RESULT = true; :};
predicate 	        ::= pred | NOT pred
            {:  RESULT = true; :};
pred 	                ::= comparison_pred | in_pred | exists_pred
            {:  RESULT = true; :};
comparison_pred 	    ::= scalar_exp COMPARISON scalar_exp
            {:  RESULT = true; :};
scalar_exp 	        ::= literal | column_ref
            {:  RESULT = true; :};
literal 	            ::= STRING | INTNUM
            {:  RESULT = true; :};
in_pred 	            ::= scalar_exp IN LPAREN select_stmt RPAREN
            {:  RESULT = true; :};
exists_pred 	        ::= EXISTS LPAREN select_stmt RPAREN
            {:  RESULT = true; :};