/** Import the class java_cup.runtime.*  */
import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.HashMap;

action code {:
    Database db = Main.getDB();
    //For type checking at top SQLNode
    HashMap<Column, String> ColTypeAssertions = new HashMap<Column, String>();
    HashMap<Column, Column> ColColAssertions = new HashMap<Column, Column>();
    //For resolving table names. <alias, tableName>
    HashMap<String, String> aliasTables = new HashMap<String, String>();
    ArrayList<Column> whereCols = new ArrayList<Column>();
    ArrayList<String> semantics = new ArrayList<String>();
    //I know this is kinda a lame way to do it
    boolean nested = false;
    boolean coRelated = false;
    :};

/* Parser code to change the way the parser reports errors (include
   line and column number of the error). */
parser code {:
    
    /* Change the method report_error so it will display the line and
       column of where the error occurred in the input as well as the
       reason for the error which is passed into the method in the
       String 'message'. */
    public void report_error(String message, Object info) {
    	/* Create a StringBuffer called 'm' with the string 'Error' in it. */
        StringBuffer m = new StringBuffer("Error");
   
        /* Check if the information passed to the method is the same
           type as the type java_cup.runtime.Symbol. */
        if (info instanceof java_cup.runtime.Symbol) {
            /* Declare a java_cup.runtime.Symbol object 's' with the
               information in the object info that is being typecasted
               as a java_cup.runtime.Symbol object. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            /* Check if the line number in the input is greater or
               equal to zero. */
            if (s.left >= 0) {                
                /* Add to the end of the StringBuffer error message
                   the line number of the error in the input. */
                m.append(" in line "+(s.left+1));   
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)                    
                    /* Add to the end of the StringBuffer error message
                       the column number of the error in the input. */
                    m.append(", column "+(s.right+1));
            }
        }
   
        /* Add to the end of the StringBuffer error message created in
           this method the message that was passed into this method. */
        m.append(" : "+message);
   
        /* Print the contents of the StringBuffer 'm', which contains
           an error message, out on a line. */
        throw new Error("Syntax Error - " + m.toString());
    }
   
    /* Change the method report_fatal_error so when it reports a fatal
       error it will display the line and column number of where the
       fatal error occurred in the input as well as the reason for the
       fatal error which is passed into the method in the object
       'message' and then exit.*/
    public void report_fatal_error(String message, Object info) {
    	try {
    		report_error(message, info);
    	} catch (Error e) {
        	throw new Error(e.getMessage());
        }
    }
:};


/* ------------Declaration of Terminals and Non Terminals Section----------- */
   
/* Terminals (tokens returned by the scanner).  

   Terminals that have no value are listed first and then terminals
   that do have an value, in this case an integer value, are listed on
   the next line down. */
terminal            SEMI, 
                    SELECT,
                    DISTINCT, 
                    FROM, 
                    WHERE, 
                    AND, 
                    NOT, 
                    COMPARISON, 
                    IN, 
                    EXISTS, 
                    COMMA, 
                    DOT, 
                    LPAREN, 
                    RPAREN;

terminal String     STRING, NAME;

terminal Integer    INTNUM;

/* Non terminals used in the grammar section.  

   Non terminals that have an object value are listed first and then
   non terminals that have an integer value are listed.  An object
   value means that it can be any type, it isn't set to a specific
   type.  So it could be an Integer or a String or whatever. */
                   
non terminal SQLNode                sql_start,
                                    select_stmt;
                                    
non terminal ArrayList<Column>      select_list;

non terminal Boolean                opt_distinct;

non terminal Column                 column_ref;
                                    
non terminal ArrayList<String[]>    from_clause,
                                    table_ref_commalist;
                                    
non terminal String[]               table_ref;

non terminal String                 table, tableAlias;

non terminal ArrayList<WhereNode>   opt_where_clause,
                                    where_clause,
                                    search_condition;
                                    
non terminal WhereNode              predicate,
                                    pred,
                                    comparison_pred,
                                    in_pred,
                                    exists_pred;
                                    
non terminal Scalar                 literal,
                                    scalar_exp;

/*------------------------------ Grammar ------------------------------*/
/*
    <sql_start> ::=<select_stmt> SEMI
    <select_stmt> ::= SELECT <opt_distinct> <select_list> <from_clause> <opt_where_clause>
    <opt_distinct> ::= / empty / | DISTINCT
    <select_list> ::= <column_ref> | <select_list> ',' <column_ref>
    <column_ref> ::= NAME | NAME '.' NAME
    <from_clause> ::= FROM <table_ref_commalist>
    <table_ref_commalist> ::= <table_ref> | <table_ref_commalist> ',' <table_ref>
    <table_ref> ::= <table> | <table> <range_variable>
    <table> ::= NAME
    <range_variable> ::= NAME
    <opt_where_clause> ::= / empty / | <where_clause>
    <where_clause> ::= WHERE <search_condition>
    <search_condition> ::= <predicate> | <search_condition> AND <predicate>
    <predicate> ::= <pred> | NOT <pred>
    <pred> ::= <comparison_pred> | <in_pred> | <exists_pred>
    <comparison_pred> ::= <scalar_exp> COMPARISON <scalar_exp>
    <scalar_exp> ::= <literal> | <column_ref>
    <literal> ::= STRING | INTNUM
    <in_pred> ::= <scalar_exp> IN '(' <select_stmt> ')'
    <exists_pred> ::= EXISTS '(' <select_stmt> ')'
------------------------------------------------------------------------*/

/* Returns SQLNode */
sql_start             ::= select_stmt:s SEMI
            {:  System.out.println("No Syntax Error");
            if(semantics.size() > 0) {
                String errorMsg = String.join(" ", semantics);
                throw new SemanticException(errorMsg);
            }
            SQLNode child = s;
            SQLNode sqlNode = new SQLNode();
            child.setParent(sqlNode);
            //Type checking
            //Column to predefined type
            for(Column checkColumn : ColTypeAssertions.keySet()) {
                if (checkColumn.getPrefix() == null) {
                    throw new SemanticException("Column " + checkColumn.getName() + " does not resolve to a table.");
                }
                String checkName = checkColumn.getName();
                String checkType = db.getRelation(checkColumn.getPrefix()).attributeType(checkColumn.getName());
                switch (checkType) {
                    case "VARCHAR":
                        checkType = "str";
                        break;
                    case "INTEGER":
                    case "DECIMAL":
                        checkType = "num";
                        break;
                }
                if(!checkType.equals(ColTypeAssertions.get(checkColumn))) {
                    throw new SemanticException("Type mismatch. " + checkColumn.getName() + " is not type " + ColTypeAssertions.get(checkColumn) + ".");
                }
            }
            //Column to Column
            //More redundant code, will fix later
            for(Column checkColumn : ColColAssertions.keySet()) {
                Column checkColumn2 = ColColAssertions.get(checkColumn);
                if (checkColumn.getPrefix() == null) {
                    throw new SemanticException("Column " + checkColumn.getName() + "xdoes not resolve to a table.");
                }
                if (checkColumn2.getPrefix() == null) {
                    throw new SemanticException("Column " + checkColumn2.getName() + "does not resolve to a table.");
                }
                String checkName1 = checkColumn.getName();
                String checkType1 = db.getRelation(checkColumn.getPrefix()).attributeType(checkColumn.getName());
                String checkName2 = checkColumn2.getName();
                String checkType2 = db.getRelation(checkColumn2.getPrefix()).attributeType(checkColumn2.getName());
                switch (checkType1) {
                    case "VARCHAR":
                        checkType1 = "str";
                        break;
                    case "INTEGER":
                    case "DECIMAL":
                        checkType1 = "num";
                        break;
                }
                switch (checkType2) {
                    case "VARCHAR":
                        checkType2 = "str";
                        break;
                    case "INTEGER":
                    case "DECIMAL":
                        checkType2 = "num";
                        break;
                }
                if(!checkType1.equals(checkType2)) {
                    throw new SemanticException("Type mismatch. " + checkColumn.getName() + " type does not match " + checkColumn2.getName() + ".");
                }
            }
            System.out.println("No Semantic Error");
            if(nested) {
                if(coRelated) {
                    System.out.println("Nested - Co-related");
                } else {
                    System.out.println("Nested - Not Co-related");
                }
            }
            else System.out.println("Not Nested");
            RESULT = sqlNode; :};

/* Returns SQLNode */
select_stmt 	        ::= SELECT opt_distinct:o select_list:s from_clause:r opt_where_clause:owc
            {: SQLNode sqlNode = new SQLNode(o, s, r);
            for(Column col : s) {
                col.setSN(sqlNode);
                String aName = col.getName();
                String tempAlias = null;
                //Prefix is present, so check if it's an alias and change it if it is
                if(col.getPrefix() != null) {
                    //If prefix is an alias, set it to its target
                    if(aliasTables.containsKey(col.getPrefix())) {
                        tempAlias = col.getPrefix();
                        col.setPrefix(aliasTables.get(col.getPrefix()));
                    }
                }
                int matchCount = 0;
                for(String[] tnames : r) {
                    String tname;
                    if(aliasTables.containsKey(tnames[1])) {
                        tname = aliasTables.get(tnames[1]);
                    } else {
                        tname = tnames[0];
                    }
                    //As we iterate through table names, if the table name exists and contains
                    //the attribute, set it as the col prefix and increment matchCount
                    if(db.relationExists(tname)) {
                        if(col.getPrefix() == null) {
                            if(db.getRelation(tname).attributeExists(aName)) {
                                matchCount++;
                                col.setPrefix(tname); //Making sure every col has a prefix
                            }
                        } else {
                            //Check only tables beginning with specified prefix
                            if (col.getPrefix().equals(tname) && db.getRelation(tname).attributeExists(aName)) {
                                if (tempAlias != null && tempAlias.equals(tnames[1])) {
                                    matchCount++;
                                } else if (tempAlias == null) {
                                    matchCount++;
                                }
                            }
                        }
                    } else {
                        semantics.add("Table does not exist: " + tname);
                    }
                }
                if(matchCount == 0) {
                    semantics.add("Column not found: " + aName);
                } else if (matchCount > 1) {
                    semantics.add("Ambiguous Column Reference: " + col.getPrefix() + "." + aName + ".");
                }
            }

            if(owc != null) {
                sqlNode.setWhereNodes(owc);
                for(WhereNode wn : owc) {
                    if(wn.getNested()) nested = true;
                    if(wn.getLeftOperandType() != null && wn.getLeftOperandType().equals("col")) {
                        wn.getLeftOperandCol().setSN(sqlNode);
                    }
                    if(wn.getRightOperandType() != null && wn.getRightOperandType().equals("col") && (wn.getNested() && (!wn.getNestingType().equals("in") || !wn.getNestingType().equals("exists")))) {
                        wn.getRightOperandCol().setSN(sqlNode);
                    }
                }
            }
            //I know this code is a bit redundant but short on time, don't want to integrate
            //Make sure that each wherePrefix resolves to somewhere
            //And is not ambiguous
            for(Column whereCol : whereCols) {
                if(whereCol.getPrefix() != null && aliasTables.containsKey(whereCol.getPrefix())) {
                    whereCol.setPrefix(aliasTables.get(whereCol.getPrefix()));
                    String wherePrefix = whereCol.getPrefix();
                }
                for(String[] tnames : r) {
                    String tname;
                    if(aliasTables.containsKey(tnames[1])) {
                        tname = aliasTables.get(tnames[1]);
                    } else {
                        tname = tnames[0];
                    }
                    if(db.relationExists(tname)) {
                        //No prefix specified, so check each table
                    } else {
                        semantics.add("Table does not exist: " + tname);
                    }
                }
            }
            //More redundant code, but this needs to be done.
            //Checking for co-relatedness. There are 2 criteria:
            //1: the column did not resolve in its parent SQLNode -- check for this here
            //2: the column resolves in some other SQLNode -- this is already checked above
            if(owc != null) {
                for (WhereNode wn : owc) {
                    if(wn.getNested()) {
                        SQLNode subQuery = wn.getSubQuery();
                        ArrayList<Column> subCols = subQuery.getColumns();
                        for(WhereNode swn : subQuery.getWhereNodes()) {
                            //Add to subCols any cols from where queries
                            //No need to dive into subqueries, that'll be recursion
                            if(swn.getLeftOperandType() != null && swn.getLeftOperandType().equals("col")) {
                                subCols.add(swn.getLeftOperandCol());
                            }
                            if(swn.getRightOperandType() != null && swn.getRightOperandType().equals("col") && !swn.getNested()) {
                                subCols.add(swn.getRightOperandCol());
                            }
                        }
                        for(Column subCol : subCols) {
                            if(subCol.getSN() != subQuery) {
                                coRelated = true;
                            }
                        }
                    }
                }
            }
            RESULT = sqlNode; :};
            
/* Return boolean true or false */
opt_distinct 	        ::= /*empty*/
            {: RESULT = false; :}
                            |
                            DISTINCT
            {: RESULT = true; :};

/* Return ArrayList<Column>*/ 
select_list 	        ::= column_ref:c
            {: ArrayList<Column> cols = new ArrayList<Column>();
            cols.add(c);
            RESULT = cols; :}
                            | select_list:s COMMA column_ref:c
            {: ArrayList<Column> cols = s;
            cols.add(c);
            RESULT = cols; :};

/* Return Column */
column_ref 	        ::= NAME:n
            {: RESULT = new Column(n); :}
                        | NAME:p DOT NAME:n
            {:  RESULT = new Column(p, n); :};
            
/* Return ArrayList<String[]> */
from_clause 	        ::= FROM table_ref_commalist:ts
            {:  RESULT = ts; :};
            
/* Return ArrayList<String[]> */
table_ref_commalist 	::= table_ref:t
            {: ArrayList<String[]> tables = new ArrayList<String[]>();
            tables.add(t);
            RESULT = tables; :}
                            | table_ref_commalist:ts COMMA table_ref:t
            {: ArrayList<String[]> tables = ts;
            tables.add(t);
            RESULT = tables; :};
            
/* Return String[]. [0]: table name, [1]: table alias */
table_ref 	        ::= table:t
            {: String[] tref = new String[2];
            tref[0] = new String(t);
            tref[1] = null;
            RESULT = tref; :}
                        | table:t tableAlias:a
            {:  String[] tref = new String[2];
            tref[0] = new String(t);
            tref[1] = new String(a);
            aliasTables.put(tref[1], tref[0]);
            RESULT = tref; :};
            
/* Return String */
table 	            ::= NAME:n
            {:  RESULT = n; :};
            
/* Return String */
tableAlias 	    ::= NAME:n
            {:  RESULT = n; :};

/* Return null or ArrayList<WhereNode> */
opt_where_clause 	    ::= /*empty*/
            {: RESULT = null; :}
                            | where_clause:wns
            {:  RESULT = wns; :};
            
/* Return ArrayList<WhereNode> */
where_clause 	        ::= WHERE search_condition:wns
            {:  RESULT = wns; :};
            
/* Return ArrayList<WhereNode> */
search_condition 	    ::= predicate:p
            {: ArrayList<WhereNode> whereNodes = new ArrayList<WhereNode>();
            whereNodes.add(p); 
            RESULT = whereNodes; :}
                            | search_condition:wns AND predicate:p
            {: ArrayList<WhereNode> whereNodes = wns;
            wns.add(p); 
            RESULT = whereNodes; :};
            
/* Return WhereNode */
predicate 	        ::= pred:p
            {: WhereNode whereNode = p;
            RESULT = p; :}
                        | NOT pred:p
            {: WhereNode whereNode = p;
            p.setNegated();
            RESULT = p; :};
            
/* Return WhereNode */
pred 	                ::= comparison_pred:p
            {: WhereNode whereNode = p;
            RESULT = whereNode; :}
                            | in_pred:p
            {: WhereNode whereNode = p; 
            whereNode.setNestingType("in"); 
            RESULT = whereNode; :}
                            | exists_pred:p
            {: WhereNode whereNode = p;
            whereNode.setNestingType("exists");
            RESULT = whereNode; :};
            
/* Returns WhereNode */   
comparison_pred 	    ::= scalar_exp:sl COMPARISON scalar_exp:sr
            {: WhereNode whereNode = new WhereNode();
            whereNode.setLeftOperandType(sl.getType());
            switch (sl.getType()) {
                case "str":
                    whereNode.setLeftOperandValue(sl.getStrValue());
                    break;
                case "int":
                    whereNode.setLeftOperandValue(sl.getIntValue().toString());
                    break;
                case "col":
                    whereNode.setLeftOperandCol(sl.getColValue());
                    whereCols.add(sl.getColValue());
                    break;
            }
            whereNode.setRightOperandType(sr.getType());
            switch (sr.getType()) {
                case "str":
                    whereNode.setRightOperandValue(sr.getStrValue());
                    break;
                case "int":
                    whereNode.setRightOperandValue(sr.getIntValue().toString());
                    break;
                case "col":
                    whereNode.setRightOperandCol(sr.getColValue());
                    whereCols.add(sr.getColValue());
                    break;
            }
            //TODO
            //make sure prefix gets set
            //Type checking
            if ((sl.getType().equals("num") || sl.getType().equals("str")) && sr.getType().equals("col")) {
                whereCols.add(sr.getColValue());
                ColTypeAssertions.put(sr.getColValue(), sl.getType());
            } else if (sl.getType().equals("col") && (sr.getType().equals("num") || sr.getType().equals("str"))) {
                whereCols.add(sl.getColValue());
                ColTypeAssertions.put(sl.getColValue(), sr.getType());
            } else if (sl.getType().equals("col") && sr.getType().equals("col")) {
                whereCols.add(sl.getColValue());
                whereCols.add(sr.getColValue());
                ColColAssertions.put(sl.getColValue(), sr.getColValue());
            } else if (!sl.getType().equals(sr.getType())) {
                semantics.add("Type mismatch: " + sl.toString() + " " + sr.toString() + ".");
            }
            RESULT = whereNode; :};
            
/* Returns Scalar */
scalar_exp 	        ::=     literal:l
            {: Scalar scalar = l;
            RESULT = scalar; :}
                            | column_ref:cr
            {: Scalar scalar = new Scalar("col", cr);
            RESULT = scalar; :};

/* Returns Scalar */
literal 	            ::= STRING:s
            {: RESULT = new Scalar("str", s); :}
                            | INTNUM:i
            {:  RESULT = new Scalar("num", i); :};

/* Returns WhereNode */   
in_pred 	            ::= scalar_exp:se IN LPAREN select_stmt:s RPAREN
            {: WhereNode whereNode = new WhereNode();
            whereNode.setNestingType("in"); 
            whereNode.setNested();
            whereNode.setSubQuery(s);
            //Type checking
            if(s.getColumns().size() == 1) {
                //Since the resolve tree won't be ready this far down the grammar
                //this will save column type assertions in some HashMaps for checking at the root node
                if(se.getType().equals("col")) {
                    ColColAssertions.put(se.getColValue(), s.getColumns().get(0));
                    whereCols.add(se.getColValue());
                    whereNode.setLeftOperandType(se.getType());
                    whereNode.setLeftOperandCol(se.getColValue());
                } else if(se.getType().equals("str") || se.getType().equals("num")) {
                    ColTypeAssertions.put(s.getColumns().get(0), se.getType());
                    whereCols.add(se.getColValue());
                    whereNode.setLeftOperandType(se.getType());
                    whereNode.setLeftOperandValue(se.getValue());
                }
                whereCols.add(s.getColumns().get(0));
            } else {
                semantics.add("Type mismatch: Can not compare expression to more than a single column.");
            }

            RESULT = whereNode; :};
            
/* Returns WhereNode */   
exists_pred 	        ::= EXISTS LPAREN select_stmt:s RPAREN
            {: WhereNode whereNode = new WhereNode();
            whereNode.setNestingType("exists");
            whereNode.setNested();
            whereNode.setSubQuery(s);
            whereCols.addAll(s.getColumns());
            RESULT = whereNode; :};