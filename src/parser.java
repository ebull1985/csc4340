
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Mar 27 00:23:44 EDT 2017
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.HashMap;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Mar 27 00:23:44 EDT 2017
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\041\000\002\002\004\000\002\002\004\000\002\003" +
    "\007\000\002\005\002\000\002\005\003\000\002\004\003" +
    "\000\002\004\005\000\002\006\003\000\002\006\005\000" +
    "\002\007\004\000\002\010\003\000\002\010\005\000\002" +
    "\011\003\000\002\011\004\000\002\012\003\000\002\013" +
    "\003\000\002\014\002\000\002\014\003\000\002\015\004" +
    "\000\002\016\003\000\002\016\005\000\002\017\003\000" +
    "\002\017\004\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\021\005\000\002\025\003\000\002\025" +
    "\003\000\002\024\003\000\002\024\003\000\002\022\007" +
    "\000\002\023\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\065\000\004\005\006\001\002\000\004\002\067\001" +
    "\002\000\004\004\066\001\002\000\006\006\007\023\ufffe" +
    "\001\002\000\004\023\ufffd\001\002\000\004\023\012\001" +
    "\002\000\006\007\017\016\016\001\002\000\022\004\ufffa" +
    "\007\ufffa\011\ufffa\013\ufffa\014\ufffa\016\ufffa\017\014\021" +
    "\ufffa\001\002\000\006\007\ufffc\016\ufffc\001\002\000\004" +
    "\023\015\001\002\000\020\004\ufff9\007\ufff9\011\ufff9\013" +
    "\ufff9\014\ufff9\016\ufff9\021\ufff9\001\002\000\004\023\012" +
    "\001\002\000\004\023\056\001\002\000\010\004\ufff1\010" +
    "\022\021\ufff1\001\002\000\006\004\ufff0\021\ufff0\001\002" +
    "\000\014\012\035\015\030\022\027\023\012\024\036\001" +
    "\002\000\006\004\uffff\021\uffff\001\002\000\010\004\uffec" +
    "\011\uffec\021\uffec\001\002\000\014\004\uffe5\011\uffe5\013" +
    "\uffe5\014\uffe5\021\uffe5\001\002\000\010\004\uffe9\011\uffe9" +
    "\021\uffe9\001\002\000\014\004\uffe4\011\uffe4\013\uffe4\014" +
    "\uffe4\021\uffe4\001\002\000\004\020\052\001\002\000\010" +
    "\004\uffe8\011\uffe8\021\uffe8\001\002\000\006\013\045\014" +
    "\044\001\002\000\010\004\uffea\011\uffea\021\uffea\001\002" +
    "\000\014\004\uffe6\011\uffe6\013\uffe6\014\uffe6\021\uffe6\001" +
    "\002\000\012\015\030\022\027\023\012\024\036\001\002" +
    "\000\014\004\uffe3\011\uffe3\013\uffe3\014\uffe3\021\uffe3\001" +
    "\002\000\010\004\uffee\011\uffee\021\uffee\001\002\000\010" +
    "\004\uffef\011\041\021\uffef\001\002\000\014\012\035\015" +
    "\030\022\027\023\012\024\036\001\002\000\010\004\uffed" +
    "\011\uffed\021\uffed\001\002\000\010\004\uffeb\011\uffeb\021" +
    "\uffeb\001\002\000\004\020\047\001\002\000\010\022\027" +
    "\023\012\024\036\001\002\000\010\004\uffe7\011\uffe7\021" +
    "\uffe7\001\002\000\004\005\006\001\002\000\004\021\051" +
    "\001\002\000\010\004\uffe2\011\uffe2\021\uffe2\001\002\000" +
    "\004\005\006\001\002\000\004\021\054\001\002\000\010" +
    "\004\uffe1\011\uffe1\021\uffe1\001\002\000\014\004\ufff5\010" +
    "\ufff5\016\ufff5\021\ufff5\023\063\001\002\000\014\004\ufff3" +
    "\010\ufff3\016\ufff3\021\ufff3\023\ufff3\001\002\000\012\004" +
    "\ufff7\010\ufff7\016\ufff7\021\ufff7\001\002\000\012\004\ufff8" +
    "\010\ufff8\016\061\021\ufff8\001\002\000\004\023\056\001" +
    "\002\000\012\004\ufff6\010\ufff6\016\ufff6\021\ufff6\001\002" +
    "\000\012\004\ufff2\010\ufff2\016\ufff2\021\ufff2\001\002\000" +
    "\012\004\ufff4\010\ufff4\016\ufff4\021\ufff4\001\002\000\006" +
    "\007\ufffb\016\ufffb\001\002\000\004\002\001\001\002\000" +
    "\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\065\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\007\001\001\000\002" +
    "\001\001\000\006\004\010\006\012\001\001\000\004\007" +
    "\017\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\064\001\001\000" +
    "\010\010\057\011\056\012\054\001\001\000\006\014\022" +
    "\015\020\001\001\000\002\001\001\000\024\006\024\016" +
    "\037\017\036\020\023\021\032\022\025\023\030\024\033" +
    "\025\031\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\006\024\020\042\021\032" +
    "\022\025\023\030\024\033\025\031\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\006\024" +
    "\017\041\020\023\021\032\022\025\023\030\024\033\025" +
    "\031\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\006\024\024\033\025\045\001\001\000" +
    "\002\001\001\000\004\003\047\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\003\052\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\063\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\011" +
    "\061\012\054\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    /* Change the method report_error so it will display the line and
       column of where the error occurred in the input as well as the
       reason for the error which is passed into the method in the
       String 'message'. */
    public void report_error(String message, Object info) {
    	/* Create a StringBuffer called 'm' with the string 'Error' in it. */
        StringBuffer m = new StringBuffer("Error");
   
        /* Check if the information passed to the method is the same
           type as the type java_cup.runtime.Symbol. */
        if (info instanceof java_cup.runtime.Symbol) {
            /* Declare a java_cup.runtime.Symbol object 's' with the
               information in the object info that is being typecasted
               as a java_cup.runtime.Symbol object. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            /* Check if the line number in the input is greater or
               equal to zero. */
            if (s.left >= 0) {                
                /* Add to the end of the StringBuffer error message
                   the line number of the error in the input. */
                m.append(" in line "+(s.left+1));   
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)                    
                    /* Add to the end of the StringBuffer error message
                       the column number of the error in the input. */
                    m.append(", column "+(s.right+1));
            }
        }
   
        /* Add to the end of the StringBuffer error message created in
           this method the message that was passed into this method. */
        m.append(" : "+message);
   
        /* Print the contents of the StringBuffer 'm', which contains
           an error message, out on a line. */
        throw new Error("Syntax Error - " + m.toString());
    }
   
    /* Change the method report_fatal_error so when it reports a fatal
       error it will display the line and column number of where the
       fatal error occurred in the input as well as the reason for the
       fatal error which is passed into the method in the object
       'message' and then exit.*/
    public void report_fatal_error(String message, Object info) {
    	try {
    		report_error(message, info);
    	} catch (Error e) {
        	throw new Error(e.getMessage());
        }
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


    Database db = Main.getDB();
    //For type checking at top SQLNode
    HashMap<Column, String> ColTypeAssertions = new HashMap<Column, String>();
    HashMap<Column, Column> ColColAssertions = new HashMap<Column, Column>();
    //For resolving table names. <alias, tableName>
    HashMap<String, String> aliasTables = new HashMap<String, String>();
    ArrayList<Column> whereCols = new ArrayList<Column>();
    ArrayList<String> semantics = new ArrayList<String>();
    //I know this is kinda a lame way to do it
    boolean nested = false;
    boolean coRelated = false;
    
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // exists_pred ::= EXISTS LPAREN select_stmt RPAREN 
            {
              WhereNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SQLNode s = (SQLNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 WhereNode whereNode = new WhereNode();
            whereNode.setNestingType("exists");
            whereNode.setNested();
            whereNode.setSubQuery(s);
            whereCols.addAll(s.getColumns());
            RESULT = whereNode; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exists_pred",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // in_pred ::= scalar_exp IN LPAREN select_stmt RPAREN 
            {
              WhereNode RESULT =null;
		int seleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int seright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Scalar se = (Scalar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SQLNode s = (SQLNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 WhereNode whereNode = new WhereNode();
            whereNode.setNestingType("in"); 
            whereNode.setNested();
            whereNode.setSubQuery(s);
            //Type checking
            if(s.getColumns().size() == 1) {
                //Since the resolve tree won't be ready this far down the grammar
                //this will save column type assertions in some HashMaps for checking at the root node
                if(se.getType().equals("col")) {
                    ColColAssertions.put(se.getColValue(), s.getColumns().get(0));
                    whereCols.add(se.getColValue());
                    whereNode.setLeftOperandType(se.getType());
                    whereNode.setLeftOperandCol(se.getColValue());
                } else if(se.getType().equals("str") || se.getType().equals("num")) {
                    ColTypeAssertions.put(s.getColumns().get(0), se.getType());
                    whereCols.add(se.getColValue());
                    whereNode.setLeftOperandType(se.getType());
                    whereNode.setLeftOperandValue(se.getValue());
                }
                whereCols.add(s.getColumns().get(0));
            } else {
                semantics.add("Type mismatch: Can not compare expression to more than a single column.");
            }

            RESULT = whereNode; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("in_pred",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // literal ::= INTNUM 
            {
              Scalar RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Scalar("num", i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // literal ::= STRING 
            {
              Scalar RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Scalar("str", s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // scalar_exp ::= column_ref 
            {
              Scalar RESULT =null;
		int crleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int crright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Column cr = (Column)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Scalar scalar = new Scalar("col", cr);
            RESULT = scalar; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("scalar_exp",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // scalar_exp ::= literal 
            {
              Scalar RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Scalar l = (Scalar)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Scalar scalar = l;
            RESULT = scalar; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("scalar_exp",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // comparison_pred ::= scalar_exp COMPARISON scalar_exp 
            {
              WhereNode RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Scalar sl = (Scalar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int srleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int srright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Scalar sr = (Scalar)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 WhereNode whereNode = new WhereNode();
            whereNode.setLeftOperandType(sl.getType());
            switch (sl.getType()) {
                case "str":
                    whereNode.setLeftOperandValue(sl.getStrValue());
                    break;
                case "int":
                    whereNode.setLeftOperandValue(sl.getIntValue().toString());
                    break;
                case "col":
                    whereNode.setLeftOperandCol(sl.getColValue());
                    whereCols.add(sl.getColValue());
                    break;
            }
            whereNode.setRightOperandType(sr.getType());
            switch (sr.getType()) {
                case "str":
                    whereNode.setRightOperandValue(sr.getStrValue());
                    break;
                case "int":
                    whereNode.setRightOperandValue(sr.getIntValue().toString());
                    break;
                case "col":
                    whereNode.setRightOperandCol(sr.getColValue());
                    whereCols.add(sr.getColValue());
                    break;
            }
            //TODO
            //make sure prefix gets set
            //Type checking
            if ((sl.getType().equals("num") || sl.getType().equals("str")) && sr.getType().equals("col")) {
                whereCols.add(sr.getColValue());
                ColTypeAssertions.put(sr.getColValue(), sl.getType());
            } else if (sl.getType().equals("col") && (sr.getType().equals("num") || sr.getType().equals("str"))) {
                whereCols.add(sl.getColValue());
                ColTypeAssertions.put(sl.getColValue(), sr.getType());
            } else if (sl.getType().equals("col") && sr.getType().equals("col")) {
                whereCols.add(sl.getColValue());
                whereCols.add(sr.getColValue());
                ColColAssertions.put(sl.getColValue(), sr.getColValue());
            } else if (!sl.getType().equals(sr.getType())) {
                semantics.add("Type mismatch: " + sl.toString() + " " + sr.toString() + ".");
            }
            RESULT = whereNode; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparison_pred",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // pred ::= exists_pred 
            {
              WhereNode RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		WhereNode p = (WhereNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 WhereNode whereNode = p;
            whereNode.setNestingType("exists");
            RESULT = whereNode; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pred",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // pred ::= in_pred 
            {
              WhereNode RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		WhereNode p = (WhereNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 WhereNode whereNode = p; 
            whereNode.setNestingType("in"); 
            RESULT = whereNode; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pred",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // pred ::= comparison_pred 
            {
              WhereNode RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		WhereNode p = (WhereNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 WhereNode whereNode = p;
            RESULT = whereNode; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pred",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // predicate ::= NOT pred 
            {
              WhereNode RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		WhereNode p = (WhereNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 WhereNode whereNode = p;
            p.setNegated();
            RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("predicate",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // predicate ::= pred 
            {
              WhereNode RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		WhereNode p = (WhereNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 WhereNode whereNode = p;
            RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("predicate",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // search_condition ::= search_condition AND predicate 
            {
              ArrayList<WhereNode> RESULT =null;
		int wnsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int wnsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<WhereNode> wns = (ArrayList<WhereNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		WhereNode p = (WhereNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<WhereNode> whereNodes = wns;
            wns.add(p); 
            RESULT = whereNodes; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("search_condition",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // search_condition ::= predicate 
            {
              ArrayList<WhereNode> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		WhereNode p = (WhereNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<WhereNode> whereNodes = new ArrayList<WhereNode>();
            whereNodes.add(p); 
            RESULT = whereNodes; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("search_condition",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // where_clause ::= WHERE search_condition 
            {
              ArrayList<WhereNode> RESULT =null;
		int wnsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wnsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<WhereNode> wns = (ArrayList<WhereNode>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = wns; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("where_clause",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // opt_where_clause ::= where_clause 
            {
              ArrayList<WhereNode> RESULT =null;
		int wnsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wnsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<WhereNode> wns = (ArrayList<WhereNode>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = wns; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opt_where_clause",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // opt_where_clause ::= 
            {
              ArrayList<WhereNode> RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opt_where_clause",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // tableAlias ::= NAME 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tableAlias",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // table ::= NAME 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("table",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // table_ref ::= table tableAlias 
            {
              String[] RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  String[] tref = new String[2];
            tref[0] = new String(t);
            tref[1] = new String(a);
            aliasTables.put(tref[1], tref[0]);
            RESULT = tref; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("table_ref",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // table_ref ::= table 
            {
              String[] RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 String[] tref = new String[2];
            tref[0] = new String(t);
            tref[1] = null;
            RESULT = tref; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("table_ref",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // table_ref_commalist ::= table_ref_commalist COMMA table_ref 
            {
              ArrayList<String[]> RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<String[]> ts = (ArrayList<String[]>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String[] t = (String[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<String[]> tables = ts;
            tables.add(t);
            RESULT = tables; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("table_ref_commalist",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // table_ref_commalist ::= table_ref 
            {
              ArrayList<String[]> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String[] t = (String[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<String[]> tables = new ArrayList<String[]>();
            tables.add(t);
            RESULT = tables; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("table_ref_commalist",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // from_clause ::= FROM table_ref_commalist 
            {
              ArrayList<String[]> RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<String[]> ts = (ArrayList<String[]>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = ts; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("from_clause",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // column_ref ::= NAME DOT NAME 
            {
              Column RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Column(p, n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("column_ref",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // column_ref ::= NAME 
            {
              Column RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Column(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("column_ref",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // select_list ::= select_list COMMA column_ref 
            {
              ArrayList<Column> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Column> s = (ArrayList<Column>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Column c = (Column)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Column> cols = s;
            cols.add(c);
            RESULT = cols; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("select_list",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // select_list ::= column_ref 
            {
              ArrayList<Column> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Column c = (Column)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Column> cols = new ArrayList<Column>();
            cols.add(c);
            RESULT = cols; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("select_list",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // opt_distinct ::= DISTINCT 
            {
              Boolean RESULT =null;
		 RESULT = true; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opt_distinct",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // opt_distinct ::= 
            {
              Boolean RESULT =null;
		 RESULT = false; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opt_distinct",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // select_stmt ::= SELECT opt_distinct select_list from_clause opt_where_clause 
            {
              SQLNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Boolean o = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Column> s = (ArrayList<Column>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<String[]> r = (ArrayList<String[]>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int owcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int owcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<WhereNode> owc = (ArrayList<WhereNode>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 SQLNode sqlNode = new SQLNode(o, s, r);
            for(Column col : s) {
                col.setSN(sqlNode);
                String aName = col.getName();
                String tempAlias = null;
                //Prefix is present, so check if it's an alias and change it if it is
                if(col.getPrefix() != null) {
                    //If prefix is an alias, set it to its target
                    if(aliasTables.containsKey(col.getPrefix())) {
                        tempAlias = col.getPrefix();
                        col.setPrefix(aliasTables.get(col.getPrefix()));
                    }
                }
                int matchCount = 0;
                for(String[] tnames : r) {
                    String tname;
                    if(aliasTables.containsKey(tnames[1])) {
                        tname = aliasTables.get(tnames[1]);
                    } else {
                        tname = tnames[0];
                    }
                    //As we iterate through table names, if the table name exists and contains
                    //the attribute, set it as the col prefix and increment matchCount
                    if(db.relationExists(tname)) {
                        if(col.getPrefix() == null) {
                            if(db.getRelation(tname).attributeExists(aName)) {
                                matchCount++;
                                col.setPrefix(tname); //Making sure every col has a prefix
                            }
                        } else {
                            //Check only tables beginning with specified prefix
                            if (col.getPrefix().equals(tname) && db.getRelation(tname).attributeExists(aName)) {
                                if (tempAlias != null && tempAlias.equals(tnames[1])) {
                                    matchCount++;
                                } else if (tempAlias == null) {
                                    matchCount++;
                                }
                            }
                        }
                    } else {
                        semantics.add("Table does not exist: " + tname);
                    }
                }
                if(matchCount == 0) {
                    semantics.add("Column not found: " + aName);
                } else if (matchCount > 1) {
                    semantics.add("Ambiguous Column Reference: " + col.getPrefix() + "." + aName + ".");
                }
            }

            if(owc != null) {
                sqlNode.setWhereNodes(owc);
                for(WhereNode wn : owc) {
                    if(wn.getNested()) nested = true;
                    if(wn.getLeftOperandType() != null && wn.getLeftOperandType().equals("col")) {
                        wn.getLeftOperandCol().setSN(sqlNode);
                    }
                    if(wn.getRightOperandType() != null && wn.getRightOperandType().equals("col") && (wn.getNested() && (!wn.getNestingType().equals("in") || !wn.getNestingType().equals("exists")))) {
                        wn.getRightOperandCol().setSN(sqlNode);
                    }
                }
            }
            //I know this code is a bit redundant but short on time, don't want to integrate
            //Make sure that each wherePrefix resolves to somewhere
            //And is not ambiguous
            for(Column whereCol : whereCols) {
                if(whereCol.getPrefix() != null && aliasTables.containsKey(whereCol.getPrefix())) {
                    whereCol.setPrefix(aliasTables.get(whereCol.getPrefix()));
                    String wherePrefix = whereCol.getPrefix();
                }
                for(String[] tnames : r) {
                    String tname;
                    if(aliasTables.containsKey(tnames[1])) {
                        tname = aliasTables.get(tnames[1]);
                    } else {
                        tname = tnames[0];
                    }
                    if(db.relationExists(tname)) {
                        //No prefix specified, so check each table
                        if(db.getRelation(tname).attributeExists(whereCol.getName())) {
                            if(whereCol.getPrefix() == null) {
                                whereCol.setPrefix(tname); //Making sure every col has a prefix
                            }
                        }
                    } else {
                        semantics.add("Table does not exist: " + tname);
                    }
                }
            }
            //More redundant code, but this needs to be done.
            //Checking for co-relatedness. There are 2 criteria:
            //1: the column did not resolve in its parent SQLNode -- check for this here
            //2: the column resolves in some other SQLNode -- this is already checked above
            if(owc != null) {
                for (WhereNode wn : owc) {
                    if(wn.getNested()) {
                        SQLNode subQuery = wn.getSubQuery();
                        ArrayList<Column> subCols = subQuery.getColumns();
                        for(WhereNode swn : subQuery.getWhereNodes()) {
                            //Add to subCols any cols from where queries
                            //No need to dive into subqueries, that'll be recursion
                            if(swn.getLeftOperandType() != null && swn.getLeftOperandType().equals("col")) {
                                subCols.add(swn.getLeftOperandCol());
                            }
                            if(swn.getRightOperandType() != null && swn.getRightOperandType().equals("col") && !swn.getNested()) {
                                subCols.add(swn.getRightOperandCol());
                            }
                        }
                        for(Column subCol : subCols) {
                            if(subCol.getSN() != subQuery) {
                                coRelated = true;
                            }
                        }
                    }
                }
            }
            RESULT = sqlNode; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("select_stmt",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= sql_start EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SQLNode start_val = (SQLNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // sql_start ::= select_stmt SEMI 
            {
              SQLNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SQLNode s = (SQLNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  System.out.println("No Syntax Error");
            if(semantics.size() > 0) {
                String errorMsg = String.join(" ", semantics);
                throw new SemanticException(errorMsg);
            }
            SQLNode child = s;
            SQLNode sqlNode = new SQLNode();
            child.setParent(sqlNode);
            //Type checking
            //Column to predefined type
            for(Column checkColumn : ColTypeAssertions.keySet()) {
                if (checkColumn.getPrefix() == null) {
                    throw new SemanticException("Column " + checkColumn.getName() + " does not resolve to a table.");
                }
                String checkName = checkColumn.getName();
                String checkType = db.getRelation(checkColumn.getPrefix()).attributeType(checkColumn.getName());
                switch (checkType) {
                    case "VARCHAR":
                        checkType = "str";
                        break;
                    case "INTEGER":
                    case "DECIMAL":
                        checkType = "num";
                        break;
                }
                if(!checkType.equals(ColTypeAssertions.get(checkColumn))) {
                    throw new SemanticException("Type mismatch. " + checkColumn.getName() + " is not type " + ColTypeAssertions.get(checkColumn) + ".");
                }
            }
            //Column to Column
            //More redundant code, will fix later
            for(Column checkColumn : ColColAssertions.keySet()) {
                Column checkColumn2 = ColColAssertions.get(checkColumn);
                if (checkColumn.getPrefix() == null) {
                    throw new SemanticException("Column " + checkColumn.getName() + "xdoes not resolve to a table.");
                }
                if (checkColumn2.getPrefix() == null) {
                    throw new SemanticException("Column " + checkColumn2.getName() + "does not resolve to a table.");
                }
                String checkName1 = checkColumn.getName();
                String checkType1 = db.getRelation(checkColumn.getPrefix()).attributeType(checkColumn.getName());
                String checkName2 = checkColumn2.getName();
                String checkType2 = db.getRelation(checkColumn2.getPrefix()).attributeType(checkColumn2.getName());
                switch (checkType1) {
                    case "VARCHAR":
                        checkType1 = "str";
                        break;
                    case "INTEGER":
                    case "DECIMAL":
                        checkType1 = "num";
                        break;
                }
                switch (checkType2) {
                    case "VARCHAR":
                        checkType2 = "str";
                        break;
                    case "INTEGER":
                    case "DECIMAL":
                        checkType2 = "num";
                        break;
                }
                if(!checkType1.equals(checkType2)) {
                    throw new SemanticException("Type mismatch. " + checkColumn.getName() + " type does not match " + checkColumn2.getName() + ".");
                }
            }
            System.out.println("No Semantic Error");
            if(nested) {
                if(coRelated) {
                    System.out.println("Nested - Co-related");
                } else {
                    System.out.println("Nested - Not Co-related");
                }
            }
            else System.out.println("Not Nested");
            RESULT = sqlNode; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sql_start",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

