/* The following code was generated by JFlex 1.3.5 on 2/15/17 8:54 PM */

/* --------------------------Usercode Section------------------------ */
   
import java_cup.runtime.*;
      

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.3.5
 * on 2/15/17 8:54 PM from the specification file
 * <tt>file:/C:/Users/ebull_000/Documents/GitHub/csc4340/src/sql.flex</tt>
 */
class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  final public static int YYEOF = -1;

  /** initial size of the lookahead buffer */
  final private static int YY_BUFFERSIZE = 16384;

  /** lexical states */
  final public static int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  final private static char [] yycmap = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  3,  2,  0,  3,  1,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     3,  0,  0,  0,  0,  0,  0,  6, 47, 48,  0,  0, 45,  7, 46,  0, 
     4,  5,  5,  5,  5,  5,  5,  5,  5,  5,  0,  8,  0,  0,  0,  0, 
     0, 28,  7, 18, 22, 14, 32,  7, 40, 24,  7,  7, 16, 30, 26, 36, 
    42,  7, 34, 11, 20,  7,  7, 38, 44,  7,  7,  9,  0, 12,  0,  7, 
     0, 27,  7, 17, 21, 13, 31,  7, 39, 23,  7,  7, 15, 29, 25, 35, 
    41,  7, 33, 10, 19,  7,  7, 37, 43,  7,  7,  0,  0,  0,  0,  0
  };

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = { 
        0,    49,    98,    49,   147,   196,   245,   147,    49,   294, 
       49,    49,    49,    49,   245,    49,   343,   392,   441,   490, 
      539,   588,   637,   686,   735,   784,   833,   882,   931,   980, 
     1029,  1078,  1127,  1176,  1225,  1274,  1323,  1372,  1421,  1470, 
     1519,  1568,  1617,  1666,  1715,  1764,  1813,  1862,  1911,  1960, 
     2009,  2058,  2107,  2156,  2205,  2254,  2303,  2352,  2401,  2450, 
     2499,  2548,  2597,  2646,  2695,  2744,  2793,  2842,  2891,  2940, 
     2989,  3038,  3087,  3136,  3185,  3234,    49,  3283,  3332,  3381, 
     3430,  3479,  3528,  3577,  3626,  3675,  3724,  3773,  3822,  3871, 
     3920,  3969,  4018,  4067,  4116,  4165,  4214,  4263,  4312,  4361, 
     4410,  4459,  4508,  4557,  4606,  4655,  4704,  4753,  4802,  4851, 
     4900,  4949,  4998,  5047,    49,    49,  5096,  5145,  5194,  5243, 
     5292,  5341,  5390,  5439,  5488,  5537,  5586,  5635,  5684,  5733, 
     5782,  5831,  5880,  5929,  5978,  6027,  6076,  6125,  6174,  6223, 
     6272,  6321,  6370,    49,    49,  6419,  6468,  6517,  6566,  6615, 
     6664,  6713,  6762,  6811,  6860,  6909,  6958,  7007,  7056,  7105, 
     7154,  7203,  7252,  7301,  7350,    49,  7399,  7448,  7497,  7546, 
     7595,  7644,  7693,  7742,  7791,  7840,  7889,  7938,    49,    49, 
     7987,  8036,  8085,  8134,  8183,  8232,  8281,  8330,  8379,  8428, 
     8477,  8526,  8575,  8624,  8673,  8722,  8771,    49,  8820,  8869, 
     8918,  8967,  9016,  9065,  9114,    49
  };

  /** 
   * The packed transition table of the DFA (part 0)
   */
  final private static String yy_packed0 = 
    "\1\2\1\3\2\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\2\10\1\2\40\10\1\13\1\14\1\15\1\16"+
    "\63\0\1\4\62\0\2\10\1\0\1\10\2\0\2\10"+
    "\1\0\40\10\10\0\2\6\1\0\1\10\2\0\2\10"+
    "\1\0\40\10\4\0\6\17\1\20\52\17\12\0\1\21"+
    "\2\0\1\22\3\0\1\23\3\0\1\24\1\0\1\25"+
    "\1\0\1\26\1\0\1\27\3\0\1\30\5\0\1\31"+
    "\26\0\1\32\63\0\1\33\64\0\1\34\64\0\1\35"+
    "\62\0\1\36\62\0\1\37\62\0\1\40\64\0\1\41"+
    "\66\0\1\42\26\0\1\43\60\0\1\44\60\0\1\45"+
    "\60\0\1\46\60\0\1\47\60\0\1\50\60\0\1\51"+
    "\60\0\1\52\60\0\1\53\55\0\1\54\60\0\1\55"+
    "\60\0\1\56\60\0\1\57\60\0\1\60\60\0\1\61"+
    "\60\0\1\62\60\0\1\63\60\0\1\64\64\0\1\65"+
    "\116\0\1\66\50\0\1\67\44\0\1\70\62\0\1\71"+
    "\62\0\1\72\7\0\1\73\46\0\1\74\70\0\1\75"+
    "\66\0\1\76\27\0\1\77\116\0\1\100\50\0\1\101"+
    "\44\0\1\102\62\0\1\103\62\0\1\104\70\0\1\105"+
    "\46\0\1\106\70\0\1\107\66\0\1\110\24\0\1\111"+
    "\60\0\1\112\60\0\1\113\60\0\1\114\60\0\1\115"+
    "\60\0\1\116\60\0\1\117\60\0\1\120\60\0\1\121"+
    "\60\0\1\122\55\0\1\123\60\0\1\124\60\0\1\125"+
    "\60\0\1\126\60\0\1\127\60\0\1\130\60\0\1\131"+
    "\60\0\1\132\60\0\1\133\66\0\1\134\70\0\1\135"+
    "\66\0\1\136\35\0\1\137\103\0\1\140\46\0\1\141"+
    "\62\0\1\142\76\0\1\143\32\0\1\144\63\0\1\145"+
    "\70\0\1\146\66\0\1\147\35\0\1\150\103\0\1\151"+
    "\46\0\1\152\62\0\1\153\76\0\1\154\32\0\1\155"+
    "\56\0\1\156\60\0\1\157\60\0\1\160\60\0\1\161"+
    "\60\0\1\162\60\0\1\163\60\0\1\164\60\0\1\165"+
    "\60\0\1\166\55\0\1\167\60\0\1\170\60\0\1\171"+
    "\60\0\1\172\60\0\1\173\60\0\1\174\60\0\1\175"+
    "\64\0\1\176\55\0\1\177\117\0\1\200\32\0\1\201"+
    "\52\0\1\202\100\0\1\203\64\0\1\204\35\0\1\205"+
    "\55\0\1\206\117\0\1\207\32\0\1\210\52\0\1\211"+
    "\100\0\1\212\64\0\1\213\32\0\1\214\60\0\1\215"+
    "\60\0\1\216\60\0\1\217\60\0\1\220\60\0\1\221"+
    "\60\0\1\222\55\0\1\223\60\0\1\224\60\0\1\225"+
    "\60\0\1\226\60\0\1\227\70\0\1\230\62\0\1\231"+
    "\70\0\1\232\54\0\1\233\46\0\1\234\65\0\1\235"+
    "\62\0\1\236\70\0\1\237\54\0\1\240\46\0\1\241"+
    "\56\0\1\242\60\0\1\243\60\0\1\244\60\0\1\245"+
    "\60\0\1\246\55\0\1\247\60\0\1\250\60\0\1\251"+
    "\60\0\1\252\72\0\1\253\47\0\1\254\107\0\1\255"+
    "\50\0\1\256\53\0\1\257\47\0\1\260\107\0\1\261"+
    "\50\0\1\262\42\0\1\263\60\0\1\264\60\0\1\265"+
    "\60\0\1\266\55\0\1\267\60\0\1\270\76\0\1\271"+
    "\52\0\1\272\67\0\1\273\52\0\1\274\52\0\1\275"+
    "\60\0\1\276\55\0\1\277\60\0\1\300\61\0\1\301"+
    "\71\0\1\302\50\0\1\303\71\0\1\304\50\0\1\305"+
    "\60\0\1\306\55\0\1\307\112\0\1\310\61\0\1\311"+
    "\30\0\1\312\55\0\1\313\100\0\1\314\61\0\1\315"+
    "\42\0\1\316\44\0";

  /** 
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack();


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  final private static int YY_ILLEGAL_STATE = 1;
  final private static int YY_NO_MATCH = 2;
  final private static int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Internal error: unknown state",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     1,  9,  1,  9,  1,  1,  1,  1,  9,  1,  9,  9,  9,  9,  0,  9, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  9,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  9,  9,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  9, 
     9,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  9,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  9,  9,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  9,  0,  0,  0,  0,  0,  0,  0,  9
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[YY_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL = true;

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean yy_eof_done;

  /* user code: */
    /* To create a new java_cup.runtime.Symbol with information about
       the current token, the token will have no value in this
       case. */
    private Symbol symbol(int type) {
        return new Symbol(type, yyline, yycolumn);
    }
    
    /* Also creates a new java_cup.runtime.Symbol with information
       about the current token, but this object has a value. */
    private Symbol symbol(int type, Object value) {
        return new Symbol(type, yyline, yycolumn, value);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the split, compressed DFA transition table.
   *
   * @return the unpacked transition table
   */
  private static int [] yy_unpack() {
    int [] trans = new int[9163];
    int offset = 0;
    offset = yy_unpack(yy_packed0, offset, trans);
    return trans;
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the index of the last entry
   */
  private static int yy_unpack(String packed, int offset, int [] trans) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   IOException  if any I/O-Error occurs
   */
  private boolean yy_refill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if (numRead < 0) {
      return true;
    }
    else {
      yy_endRead+= numRead;  
      return false;
    }
  }


  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */

    if (yy_reader != null)
      yy_reader.close();
  }


  /**
   * Closes the current stream, and resets the
   * scanner to read from a new input stream.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  final public void yyreset(java.io.Reader reader) throws java.io.IOException {
    yyclose();
    yy_reader = reader;
    yy_atBOL  = true;
    yy_atEOF  = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    yy_lexical_state = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  final public char yycharat(int pos) {
    return yy_buffer[yy_startRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void yy_do_eof() throws java.io.IOException {
    if (!yy_eof_done) {
      yy_eof_done = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int yy_input;
    int yy_action;

    // cached fields:
    int yy_currentPos_l;
    int yy_startRead_l;
    int yy_markedPos_l;
    int yy_endRead_l = yy_endRead;
    char [] yy_buffer_l = yy_buffer;
    char [] yycmap_l = yycmap;

    int [] yytrans_l = yytrans;
    int [] yy_rowMap_l = yy_rowMap;
    byte [] yy_attr_l = YY_ATTRIBUTE;

    while (true) {
      yy_markedPos_l = yy_markedPos;

      boolean yy_r = false;
      for (yy_currentPos_l = yy_startRead; yy_currentPos_l < yy_markedPos_l;
                                                             yy_currentPos_l++) {
        switch (yy_buffer_l[yy_currentPos_l]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          yy_r = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          yy_r = true;
          break;
        case '\n':
          if (yy_r)
            yy_r = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          yy_r = false;
          yycolumn++;
        }
      }

      if (yy_r) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean yy_peek;
        if (yy_markedPos_l < yy_endRead_l)
          yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        else if (yy_atEOF)
          yy_peek = false;
        else {
          boolean eof = yy_refill();
          yy_markedPos_l = yy_markedPos;
          yy_buffer_l = yy_buffer;
          if (eof) 
            yy_peek = false;
          else 
            yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        }
        if (yy_peek) yyline--;
      }
      yy_action = -1;

      yy_startRead_l = yy_currentPos_l = yy_currentPos = 
                       yy_startRead = yy_markedPos_l;

      yy_state = yy_lexical_state;


      yy_forAction: {
        while (true) {

          if (yy_currentPos_l < yy_endRead_l)
            yy_input = yy_buffer_l[yy_currentPos_l++];
          else if (yy_atEOF) {
            yy_input = YYEOF;
            break yy_forAction;
          }
          else {
            // store back cached positions
            yy_currentPos  = yy_currentPos_l;
            yy_markedPos   = yy_markedPos_l;
            boolean eof = yy_refill();
            // get translated positions and possibly new buffer
            yy_currentPos_l  = yy_currentPos;
            yy_markedPos_l   = yy_markedPos;
            yy_buffer_l      = yy_buffer;
            yy_endRead_l     = yy_endRead;
            if (eof) {
              yy_input = YYEOF;
              break yy_forAction;
            }
            else {
              yy_input = yy_buffer_l[yy_currentPos_l++];
            }
          }
          int yy_next = yytrans_l[ yy_rowMap_l[yy_state] + yycmap_l[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = yy_attr_l[yy_state];
          if ( (yy_attributes & 1) == 1 ) {
            yy_action = yy_state; 
            yy_markedPos_l = yy_currentPos_l; 
            if ( (yy_attributes & 8) == 8 ) break yy_forAction;
          }

        }
      }

      // store back cached position
      yy_markedPos = yy_markedPos_l;

      switch (yy_action) {

        case 4: 
        case 5: 
          {  return symbol(sym.INTNUM, new Integer(yytext()));  }
        case 207: break;
        case 10: 
          {  System.out.print(" " + yytext() + " "); return symbol(sym.COMMA);  }
        case 208: break;
        case 8: 
          {  System.out.print(" " + yytext() + " "); return symbol(sym.SEMI);  }
        case 209: break;
        case 143: 
          {  System.out.print(" " + yytext() + " "); return symbol(sym.NAME);  }
        case 210: break;
        case 144: 
          {  System.out.print(" " + yytext() + " "); return symbol(sym.FROM);  }
        case 211: break;
        case 165: 
          {  System.out.print(" " + yytext() + " "); return symbol(sym.WHERE);  }
        case 212: break;
        case 197: 
          {  System.out.print(" " + yytext() + " "); return symbol(sym.DISTINCT);  }
        case 213: break;
        case 1: 
        case 6: 
        case 9: 
          {  throw new Error("Lexical Error");  }
        case 214: break;
        case 205: 
          {  System.out.print(" " + yytext() + " "); return symbol(sym.COMPARISON);  }
        case 215: break;
        case 179: 
          {  System.out.print(" " + yytext() + " "); return symbol(sym.EXISTS);  }
        case 216: break;
        case 12: 
          {  System.out.print(" " + yytext() + " "); return symbol(sym.LPAREN);  }
        case 217: break;
        case 11: 
          {  System.out.print(" " + yytext() + " "); return symbol(sym.DOT);  }
        case 218: break;
        case 2: 
        case 3: 
          {  /* just skip what was found, do nothing */  }
        case 219: break;
        case 13: 
          {  System.out.print(" " + yytext() + " "); return symbol(sym.RPAREN);  }
        case 220: break;
        case 15: 
          {  String text = new String(yytext());
                         if (text.length() > 2) {
                            text = new String(text.substring(1, text.length() - 1));
                         } else {
                            //This could happen with the data ''
                            text = new String("");
                         }
                         System.out.print(" " + text + " ");
                         return symbol(sym.STRING, new String(text)) ; }
        case 221: break;
        case 76: 
          {  System.out.print(" " + yytext() + " "); return symbol(sym.IN);  }
        case 222: break;
        case 114: 
          {  System.out.print(" " + yytext() + " "); return symbol(sym.NOT);  }
        case 223: break;
        case 115: 
          {  System.out.print(" " + yytext() + " "); return symbol(sym.AND);  }
        case 224: break;
        case 178: 
          {  System.out.print(" " + yytext() + " "); return symbol(sym.SELECT);  }
        case 225: break;
        case 0: 
        case 7: 
          {  System.out.print(" " + yytext() + " "); return symbol(sym.NAME, new String(yytext())); }
        case 226: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            yy_do_eof();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }


}
